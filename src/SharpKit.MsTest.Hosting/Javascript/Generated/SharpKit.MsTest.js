/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Microsoft$VisualStudio$TestTools$UnitTesting$Assert = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.Assert",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertionFailure = null;
        },
        IsTrue$$Boolean: function (condition){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue$$Boolean$$String$$Object$Array(condition, System.String.Empty, null);
        },
        IsTrue$$Boolean$$String: function (condition, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue$$Boolean$$String$$Object$Array(condition, message, null);
        },
        IsTrue$$Boolean$$String$$Object$Array: function (condition, message, parameters){
            if (condition)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsTrue", message, parameters);
        },
        IsFalse$$Boolean: function (condition){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse$$Boolean$$String$$Object$Array(condition, System.String.Empty, null);
        },
        IsFalse$$Boolean$$String: function (condition, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse$$Boolean$$String$$Object$Array(condition, message, null);
        },
        IsFalse$$Boolean$$String$$Object$Array: function (condition, message, parameters){
            if (!condition)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsFalse", message, parameters);
        },
        IsNull$$Object: function (value){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull$$Object$$String$$Object$Array(value, System.String.Empty, null);
        },
        IsNull$$Object$$String: function (value, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull$$Object$$String$$Object$Array(value, message, null);
        },
        IsNull$$Object$$String$$Object$Array: function (value, message, parameters){
            if (value == null)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsNull", message, parameters);
        },
        IsNotNull$$Object: function (value){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull$$Object$$String$$Object$Array(value, System.String.Empty, null);
        },
        IsNotNull$$Object$$String: function (value, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull$$Object$$String$$Object$Array(value, message, null);
        },
        IsNotNull$$Object$$String$$Object$Array: function (value, message, parameters){
            if (value != null)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsNotNull", message, parameters);
        },
        AreSame$$Object$$Object: function (expected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame$$Object$$Object$$String$$Object$Array(expected, actual, System.String.Empty, null);
        },
        AreSame$$Object$$Object$$String: function (expected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame$$Object$$Object$$String$$Object$Array(expected, actual, message, null);
        },
        AreSame$$Object$$Object$$String$$Object$Array: function (expected, actual, message, parameters){
            if (System.Object.ReferenceEquals(expected, actual))
                return;
            var message1 = message;
            if (Is(expected, System.ValueType.ctor) && Is(actual, System.ValueType.ctor))
                message1 = System.String.Format$$String$$Object("Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message));
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreSame", message1, parameters);
        },
        AreNotSame$$Object$$Object: function (notExpected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame$$Object$$Object$$String$$Object$Array(notExpected, actual, System.String.Empty, null);
        },
        AreNotSame$$Object$$Object$$String: function (notExpected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame$$Object$$Object$$String$$Object$Array(notExpected, actual, message, null);
        },
        AreNotSame$$Object$$Object$$String$$Object$Array: function (notExpected, actual, message, parameters){
            if (!System.Object.ReferenceEquals(notExpected, actual))
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreNotSame", message, parameters);
        },
        AreEqual$1$$T$$T: function (T, expected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$1$$T$$T$$String$$Object$Array(T, expected, actual, System.String.Empty, null);
        },
        AreEqual$1$$T$$T$$String: function (T, expected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$1$$T$$T$$String$$Object$Array(T, expected, actual, message, null);
        },
        AreEqual$1$$T$$T$$String$$Object$Array: function (T, expected, actual, message, parameters){
            message = Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CreateCompleteMessage(message, parameters);
            if (System.Object.Equals$$Object$$Object(expected, actual))
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFailure("Assert.AreEqual", actual == null || expected == null || actual.GetType().Equals$$Type(expected.GetType()) ? System.String.Format$$String$$Object$$Object$$Object("Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(expected), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual)) : System.String.Format$$String$$Object$Array("Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(expected), expected.GetType().get_FullName(), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual), actual.GetType().get_FullName()));
        },
        AreNotEqual$1$$T$$T: function (T, notExpected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$1$$T$$T$$String$$Object$Array(T, notExpected, actual, System.String.Empty, null);
        },
        AreNotEqual$1$$T$$T$$String: function (T, notExpected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$1$$T$$T$$String$$Object$Array(T, notExpected, actual, message, null);
        },
        AreNotEqual$1$$T$$T$$String$$Object$Array: function (T, notExpected, actual, message, parameters){
            message = Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CreateCompleteMessage(message, parameters);
            if (!System.Object.Equals$$Object$$Object(notExpected, actual))
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFailure("Assert.AreNotEqual", System.String.Format$$String$$Object$$Object$$Object("Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(notExpected), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual)));
        },
        AreEqual$$Object$$Object: function (expected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Object$$Object$$String$$Object$Array(expected, actual, System.String.Empty, null);
        },
        AreEqual$$Object$$Object$$String: function (expected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Object$$Object$$String$$Object$Array(expected, actual, message, null);
        },
        AreEqual$$Object$$Object$$String$$Object$Array: function (expected, actual, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$1$$T$$T$$String$$Object$Array(System.Object.ctor, expected, actual, message, parameters);
        },
        AreNotEqual$$Object$$Object: function (notExpected, actual){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Object$$Object$$String$$Object$Array(notExpected, actual, System.String.Empty, null);
        },
        AreNotEqual$$Object$$Object$$String: function (notExpected, actual, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Object$$Object$$String$$Object$Array(notExpected, actual, message, null);
        },
        AreNotEqual$$Object$$Object$$String$$Object$Array: function (notExpected, actual, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$1$$T$$T$$String$$Object$Array(System.Object.ctor, notExpected, actual, message, parameters);
        },
        AreEqual$$Single$$Single$$Single: function (expected, actual, delta){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Single$$Single$$Single$$String$$Object$Array(expected, actual, delta, System.String.Empty, null);
        },
        AreEqual$$Single$$Single$$Single$$String: function (expected, actual, delta, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Single$$Single$$Single$$String$$Object$Array(expected, actual, delta, message, null);
        },
        AreEqual$$Single$$Single$$Single$$String$$Object$Array: function (expected, actual, delta, message, parameters){
            if (System.Single.IsNaN(expected) || System.Single.IsNaN(actual) || System.Single.IsNaN(delta))
                Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreEqual", System.String.Format$$String$$Object$Array("Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), expected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
            if (System.Math.Abs$$Single(expected - actual) <= delta)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreEqual", System.String.Format$$String$$Object$Array("Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), expected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
        },
        AreNotEqual$$Single$$Single$$Single: function (notExpected, actual, delta){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Single$$Single$$Single$$String$$Object$Array(notExpected, actual, delta, System.String.Empty, null);
        },
        AreNotEqual$$Single$$Single$$Single$$String: function (notExpected, actual, delta, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Single$$Single$$Single$$String$$Object$Array(notExpected, actual, delta, message, null);
        },
        AreNotEqual$$Single$$Single$$Single$$String$$Object$Array: function (notExpected, actual, delta, message, parameters){
            if (System.Math.Abs$$Single(notExpected - actual) > delta)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreNotEqual", System.String.Format$$String$$Object$Array("Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), notExpected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
        },
        AreEqual$$Double$$Double$$Double: function (expected, actual, delta){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Double$$Double$$Double$$String$$Object$Array(expected, actual, delta, System.String.Empty, null);
        },
        AreEqual$$Double$$Double$$Double$$String: function (expected, actual, delta, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$Double$$Double$$Double$$String$$Object$Array(expected, actual, delta, message, null);
        },
        AreEqual$$Double$$Double$$Double$$String$$Object$Array: function (expected, actual, delta, message, parameters){
            if (System.Double.IsNaN(expected) || System.Double.IsNaN(actual) || System.Double.IsNaN(delta))
                Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreEqual", System.String.Format$$String$$Object$Array("Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), expected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
            if (System.Math.Abs$$Double(expected - actual) <= delta)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreEqual", System.String.Format$$String$$Object$Array("Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), expected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
        },
        AreNotEqual$$Double$$Double$$Double: function (notExpected, actual, delta){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Double$$Double$$Double$$String$$Object$Array(notExpected, actual, delta, System.String.Empty, null);
        },
        AreNotEqual$$Double$$Double$$Double$$String: function (notExpected, actual, delta, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$Double$$Double$$Double$$String$$Object$Array(notExpected, actual, delta, message, null);
        },
        AreNotEqual$$Double$$Double$$Double$$String$$Object$Array: function (notExpected, actual, delta, message, parameters){
            if (System.Math.Abs$$Double(notExpected - actual) > delta)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreNotEqual", System.String.Format$$String$$Object$Array("Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), notExpected.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), actual.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat()), delta.ToString$$IFormatProvider(System.Globalization.CultureInfo.get_CurrentCulture().get_NumberFormat())), parameters);
        },
        AreEqual$$String$$String$$Boolean: function (expected, actual, ignoreCase){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$String$$String$$Boolean$$String$$Object$Array(expected, actual, ignoreCase, System.String.Empty, null);
        },
        AreEqual$$String$$String$$Boolean$$String: function (expected, actual, ignoreCase, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$String$$String$$Boolean$$String$$Object$Array(expected, actual, ignoreCase, message, null);
        },
        AreEqual$$String$$String$$Boolean$$String$$Object$Array: function (expected, actual, ignoreCase, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(expected, actual, ignoreCase, System.Globalization.CultureInfo.get_InvariantCulture(), message, parameters);
        },
        AreEqual$$String$$String$$Boolean$$CultureInfo: function (expected, actual, ignoreCase, culture){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(expected, actual, ignoreCase, culture, System.String.Empty, null);
        },
        AreEqual$$String$$String$$Boolean$$CultureInfo$$String: function (expected, actual, ignoreCase, culture, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(expected, actual, ignoreCase, culture, message, null);
        },
        AreEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array: function (expected, actual, ignoreCase, culture, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(culture, "Assert.AreEqual", "culture", System.String.Empty);
            if (System.String.Compare$$String$$String$$Boolean$$CultureInfo(expected, actual, ignoreCase, culture) == 0)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreEqual", ignoreCase || System.String.Compare$$String$$String$$Boolean$$CultureInfo(expected, actual, true, culture) != 0 ? System.String.Format$$String$$Object$$Object$$Object("Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(expected), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual)) : System.String.Format$$String$$Object$$Object$$Object("Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(expected), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual)), parameters);
        },
        AreNotEqual$$String$$String$$Boolean: function (notExpected, actual, ignoreCase){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$String$$String$$Boolean$$String$$Object$Array(notExpected, actual, ignoreCase, System.String.Empty, null);
        },
        AreNotEqual$$String$$String$$Boolean$$String: function (notExpected, actual, ignoreCase, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$String$$String$$Boolean$$String$$Object$Array(notExpected, actual, ignoreCase, message, null);
        },
        AreNotEqual$$String$$String$$Boolean$$String$$Object$Array: function (notExpected, actual, ignoreCase, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(notExpected, actual, ignoreCase, System.Globalization.CultureInfo.get_InvariantCulture(), message, parameters);
        },
        AreNotEqual$$String$$String$$Boolean$$CultureInfo: function (notExpected, actual, ignoreCase, culture){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(notExpected, actual, ignoreCase, culture, System.String.Empty, null);
        },
        AreNotEqual$$String$$String$$Boolean$$CultureInfo$$String: function (notExpected, actual, ignoreCase, culture, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array(notExpected, actual, ignoreCase, culture, message, null);
        },
        AreNotEqual$$String$$String$$Boolean$$CultureInfo$$String$$Object$Array: function (notExpected, actual, ignoreCase, culture, message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(culture, "Assert.AreNotEqual", "culture", System.String.Empty);
            if (System.String.Compare$$String$$String$$Boolean$$CultureInfo(notExpected, actual, ignoreCase, culture) != 0)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.AreNotEqual", System.String.Format$$String$$Object$$Object$$Object("Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(notExpected), Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(actual)), parameters);
        },
        IsInstanceOfType$$Object$$Type: function (value, expectedType){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType$$Object$$Type$$String$$Object$Array(value, expectedType, System.String.Empty, null);
        },
        IsInstanceOfType$$Object$$Type$$String: function (value, expectedType, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType$$Object$$Type$$String$$Object$Array(value, expectedType, message, null);
        },
        IsInstanceOfType$$Object$$Type$$String$$Object$Array: function (value, expectedType, message, parameters){
            if (System.Type.op_Equality$$Type$$Type(expectedType, null))
                Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsInstanceOfType", message, parameters);
            if (expectedType.IsInstanceOfType(value))
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsInstanceOfType", System.String.Format$$String$$Object$$Object$$Object("{0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;.", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), expectedType.ToString(), value == null ? "(null)" : value.GetType().ToString()), parameters);
        },
        IsNotInstanceOfType$$Object$$Type: function (value, wrongType){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType$$Object$$Type$$String$$Object$Array(value, wrongType, System.String.Empty, null);
        },
        IsNotInstanceOfType$$Object$$Type$$String: function (value, wrongType, message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType$$Object$$Type$$String$$Object$Array(value, wrongType, message, null);
        },
        IsNotInstanceOfType$$Object$$Type$$String$$Object$Array: function (value, wrongType, message, parameters){
            if (System.Type.op_Equality$$Type$$Type(wrongType, null))
                Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsNotInstanceOfType", message, parameters);
            if (value == null || !wrongType.IsInstanceOfType(value))
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.IsNotInstanceOfType", System.String.Format$$String$$Object$$Object$$Object("Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}", message == null ? System.String.Empty : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), wrongType.ToString(), value.GetType().ToString()), parameters);
        },
        Fail: function (){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail$$String$$Object$Array(System.String.Empty, null);
        },
        Fail$$String: function (message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail$$String$$Object$Array(message, null);
        },
        Fail$$String$$Object$Array: function (message, parameters){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail("Assert.Fail", message, parameters);
        },
        Inconclusive: function (){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive$$String$$Object$Array(System.String.Empty, null);
        },
        Inconclusive$$String: function (message){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive$$String$$Object$Array(message, null);
        },
        Inconclusive$$String$$Object$Array: function (message, parameters){
            var str = System.String.Empty;
            if (!System.String.IsNullOrEmpty(message))
                str = parameters != null ? System.String.Format$$String$$Object$Array(Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), parameters) : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message);
            throw $CreateException(new Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.ctor$$String(System.String.Format$$String$$Object$$Object("{0} failed. {1}", "Assert.Inconclusive", str)), new Error());
        },
        Equals$$Object$$Object: function (objA, objB){
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail$$String("Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead.");
            return false;
        },
        HandleFail: function (assertionName, message, parameters){
            var completeMessage = Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CreateCompleteMessage(message, parameters);
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFailure(assertionName, completeMessage);
        },
        CreateCompleteMessage: function (message, parameters){
            var str = System.String.Empty;
            if (!System.String.IsNullOrEmpty(message))
                str = parameters != null ? System.String.Format$$String$$Object$Array(Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message), parameters) : Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(message);
            return str;
        },
        HandleFailure: function (assertionName, message){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertionFailure, null))
                Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertionFailure(null, System.EventArgs.Empty);
            throw $CreateException(new Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.ctor$$String(System.String.Format$$String$$Object$$Object("{0} failed. {1}", assertionName, message)), new Error());
        },
        CheckParameterNotNull: function (param, assertionName, parameterName, message, parameters){
            if (param != null)
                return;
            Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(assertionName, System.String.Format$$String$$Object$$Object("The parameter \'{0}\' is invalid. The value cannot be null. {1}.", parameterName, message), parameters);
        },
        ReplaceNulls: function (input){
            if (input == null)
                return "(null)";
            var input1 = input.ToString();
            if (input1 == null)
                return "(object)";
            return Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(input1);
        },
        ReplaceNullChars: function (input){
            if (System.String.IsNullOrEmpty(input))
                return input;
            var list = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            for (var index = 0; index < input.get_Length(); ++index){
                if (input.get_Chars$$Int32(index) == "\0")
                    list.Add(index);
            }
            if (list.get_Count() <= 0)
                return input;
            var stringBuilder = new System.Text.StringBuilder.ctor$$Int32(input.get_Length() + list.get_Count());
            var startIndex = 0;
            var $it1 = list.GetEnumerator();
            while ($it1.MoveNext()){
                var num = $it1.get_Current();
                stringBuilder.Append$$String(input.Substring$$Int32$$Int32(startIndex, num - startIndex));
                stringBuilder.Append$$String("\\0");
                startIndex = num + 1;
            }
            stringBuilder.Append$$String(input.Substring$$Int32(startIndex));
            return stringBuilder.ToString();
        }
    },
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$Assert);
var Microsoft$VisualStudio$TestTools$UnitTesting$AssertFailedException = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException",
    baseTypeName: "Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor$$String$$Exception: function (msg, ex){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor$$String$$Exception.call(this, msg, ex);
        },
        ctor$$String: function (msg){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor$$String.call(this, msg);
        },
        ctor: function (){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$AssertFailedException);
var Microsoft$VisualStudio$TestTools$UnitTesting$AssertInconclusiveException = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException",
    baseTypeName: "Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor$$String$$Exception: function (msg, ex){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor$$String$$Exception.call(this, msg, ex);
        },
        ctor$$String: function (msg){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor$$String.call(this, msg);
        },
        ctor: function (){
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$AssertInconclusiveException);
var Microsoft$VisualStudio$TestTools$UnitTesting$TestCategoryAttribute = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute",
    baseTypeName: "Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (testCategory){
            this.m_testCategories = null;
            Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.ctor.call(this);
            this.m_testCategories = (function (){
                var $v1 = new System.Collections.Generic.List$1.ctor$$Int32(System.String.ctor, 1);
                $v1.Add(testCategory);
                return $v1;
            }).call(this);
        },
        TestCategories$$: "System.Collections.Generic.IList`1[[System.String]]",
        get_TestCategories: function (){
            return this.m_testCategories;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$TestCategoryAttribute);
var Microsoft$VisualStudio$TestTools$UnitTesting$TestCategoryBaseAttribute = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        },
        TestCategories$$: "System.Collections.Generic.IList`1[[System.String]]"
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$TestCategoryBaseAttribute);
var Microsoft$VisualStudio$TestTools$UnitTesting$TestClassAttribute = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$TestClassAttribute);
var Microsoft$VisualStudio$TestTools$UnitTesting$TestMethodAttribute = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$TestMethodAttribute);
var Microsoft$VisualStudio$TestTools$UnitTesting$UnitTestAssertException = {
    fullname: "Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.MsTest",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.m_message = null;
            System.Exception.ctor.call(this);
        },
        Message$$: "System.String",
        get_Message: function (){
            if (this.m_message != null)
                return this.m_message.ToString();
            return System.Exception.commonPrototype.get_Message.call(this);
        },
        ctor$$String: function (message){
            this.m_message = null;
            Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.ctor$$String$$Exception.call(this, message, null);
        },
        ctor$$String$$Exception: function (message, inner){
            this.m_message = null;
            System.Exception.ctor$$String$$Exception.call(this, message, inner);
            this.m_message = message;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Microsoft$VisualStudio$TestTools$UnitTesting$UnitTestAssertException);

