/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpKit$MsTest$Metadata$TestAssemblyModel = {
    fullname: "SharpKit.MsTest.Metadata.TestAssemblyModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (name){
            this.classes = null;
            this._Name = null;
            System.Object.ctor.call(this);
            this.set_Name(name);
            this.classes = new System.Collections.Generic.List$1.ctor(SharpKit.MsTest.Metadata.TestTypeModel.ctor);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Classes$$: "System.Collections.Generic.IReadOnlyList`1[[SharpKit.MsTest.Metadata.TestTypeModel]]",
        get_Classes: function (){
            return this.classes;
        },
        AddClass: function (type){
            if (type == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("type"), new Error());
            this.classes.Add(type);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$Metadata$TestAssemblyModel);
var SharpKit$MsTest$UI$TestCaseProvider = {
    fullname: "SharpKit.MsTest.UI.TestCaseProvider",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Load: function (){
            var types = new System.Collections.Generic.List$1.ctor(System.Type.ctor);
            var typesRaw = this.GetClasses();
            for (var typeName in typesRaw){
                var type = typesRaw[typeName]._ClrType;
                try{
                    var attribute = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.ctor, System.Linq.Enumerable.OfType$1(Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.ctor, type.GetCustomAttributes$$Boolean(true)));
                    if (attribute != null)
                        types.Add(type);
                }
                catch($$e1){
                }
            }
            var models = this.LoadMetadata(types);
            return models;
        },
        LoadMetadata: function (types){
            var result = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SharpKit.MsTest.Metadata.TestAssemblyModel.ctor);
            var $it1 = types.GetEnumerator();
            while ($it1.MoveNext()){
                var type = $it1.get_Current();
                var assemblyName = type["_JsType"].assemblyName;
                var assembly;
                if (!(function (){
                    var $1 = {
                        Value: assembly
                    };
                    var $res = result.TryGetValue(assemblyName, $1);
                    assembly = $1.Value;
                    return $res;
                }).call(this))
                    result.set_Item$$TKey(assemblyName, assembly = new SharpKit.MsTest.Metadata.TestAssemblyModel.ctor(assemblyName));
                this.LoadClassMetadata(assembly, type);
            }
            return System.Linq.Enumerable.ToList$1(SharpKit.MsTest.Metadata.TestAssemblyModel.ctor, result.get_Values());
        },
        LoadClassMetadata: function (assemblyModel, type){
            var model = new SharpKit.MsTest.Metadata.TestTypeModel.ctor(type);
            for (var $i3 = 0,$t3 = type.GetMethods(),$l3 = $t3.length,method = $t3[$i3]; $i3 < $l3; $i3++, method = $t3[$i3]){
                var isTestMethod = false;
                var categories = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                var attributes = method.GetCustomAttributes$$Boolean(true);
                for (var $i4 = 0,$l4 = attributes.length,attribute = attributes[$i4]; $i4 < $l4; $i4++, attribute = attributes[$i4]){
                    var categoryAttribute = As(attribute, Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.ctor);
                    if (categoryAttribute != null)
                        categories.AddRange(categoryAttribute.get_TestCategories());
                    var methodAttribute = As(attribute, Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.ctor);
                    if (methodAttribute != null)
                        isTestMethod = true;
                }
                if (isTestMethod){
                    var methodModel = new SharpKit.MsTest.Metadata.TestMethodModel.ctor(method, categories);
                    model.AddMethod(methodModel);
                    continue;
                }
            }
            assemblyModel.AddClass(model);
        },
        GetClasses: function (){
            return JsCompiler.Types;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$UI$TestCaseProvider);
var SharpKit$MsTest$UI$TestCaseProvider$ClrTypeGetter = {
    fullname: "SharpKit.MsTest.UI.TestCaseProvider.ClrTypeGetter",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._ClrType = null;
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$UI$TestCaseProvider$ClrTypeGetter);
var SharpKit$MsTest$Metadata$TestMethodModel = {
    fullname: "SharpKit.MsTest.Metadata.TestMethodModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (method, categories){
            this._Categories = null;
            this._Method = null;
            System.Object.ctor.call(this);
            this.set_Method(method);
            if (categories == null)
                this.set_Categories(new System.Collections.Generic.List$1.ctor(System.String.ctor));
            else
                this.set_Categories(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(System.String.ctor, categories));
        },
        Categories$$: "System.Collections.Generic.IReadOnlyList`1[[System.String]]",
        get_Categories: function (){
            return this._Categories;
        },
        set_Categories: function (value){
            this._Categories = value;
        },
        Method$$: "System.Reflection.MethodInfo",
        get_Method: function (){
            return this._Method;
        },
        set_Method: function (value){
            this._Method = value;
        },
        Before: function (instance){
        },
        After: function (instance){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Reflection.MethodInfo", "System.Collections.Generic.IEnumerable"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$Metadata$TestMethodModel);
var SharpKit$MsTest$UI$TestPresenter = {
    fullname: "SharpKit.MsTest.UI.TestPresenter",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.testClassProvider = new SharpKit.MsTest.UI.TestCaseProvider.ctor();
            System.Object.ctor.call(this);
        },
        Render: function (root){
            var assemblies = this.testClassProvider.Load();
            var html = new System.Text.StringBuilder.ctor();
            if (assemblies.get_Count() == 0){
                html.Append$$String("No test classes found.");
            }
            else {
                var $it4 = assemblies.GetEnumerator();
                while ($it4.MoveNext()){
                    var assembly = $it4.get_Current();
                    html.Append$$String("<strong>" + assembly.get_Name() + "</strong>");
                    html.Append$$String("<br />");
                    var $it5 = assembly.get_Classes().GetEnumerator();
                    while ($it5.MoveNext()){
                        var type = $it5.get_Current();
                        html.Append$$String(type.get_Type().get_Name());
                        html.Append$$String("<br />");
                    }
                    html.Append$$String("<hr />");
                }
            }
            root.html(html.toString());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$UI$TestPresenter);
var TestRuntime = {
    fullname: "TestRuntime",
    baseTypeName: "System.Object",
    staticDefinition: {
        Start: function (root){
            if (root == null)
                root = $(document.body);
            else
                root = $(root);
            var presenter = new SharpKit.MsTest.UI.TestPresenter.ctor();
            presenter.Render(root);
            return presenter;
        }
    },
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(TestRuntime);
var SharpKit$MsTest$Metadata$TestTypeModel = {
    fullname: "SharpKit.MsTest.Metadata.TestTypeModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.MsTest.UI",
    Kind: "Class",
    definition: {
        ctor: function (type){
            this.methods = null;
            this._Type = null;
            this._Methods = null;
            System.Object.ctor.call(this);
            if (type == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("type"), new Error());
            this.set_Type(type);
            this.methods = new System.Collections.Generic.List$1.ctor(SharpKit.MsTest.Metadata.TestMethodModel.ctor);
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        Methods$$: "System.Collections.Generic.IReadOnlyList`1[[SharpKit.MsTest.Metadata.TestMethodModel]]",
        get_Methods: function (){
            return this._Methods;
        },
        set_Methods: function (value){
            this._Methods = value;
        },
        AddMethod: function (method){
            if (method == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("method"), new Error());
            this.methods.Add(method);
            return this;
        },
        Before: function (instance){
        },
        After: function (instance){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(SharpKit$MsTest$Metadata$TestTypeModel);

